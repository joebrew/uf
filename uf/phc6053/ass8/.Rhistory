plotclr<- brewer.pal(nclr, "Reds")
class<- classIntervals(plotvar, nclr, style ="fixed", fixedBreaks=seq(min, max, breaks))
colcode<- findColours(class, plotclr)
colcode2<-gsub(",","-", gsub("[[]|[)]|[]]","", names(attr(colcode, "table"))))
colcode3 <- round(as.numeric(unlist(strsplit(colcode2, "-")))^3, digits=0)
colcode4 <- c()
for (i in seq(1, length(colcode3),2)){
colcode4[i] <- paste0(colcode3[i], "-", colcode3[i+1])
}
colcode5 <- colcode4[seq(1, length(colcode4),2)]
### Plot the Map
plot(mapDen, border=FALSE, fill=TRUE, col=colcode)# ONCE YOUVE DEFINED PLOT VAR
###Add a Legend
legend("topleft",
legend = colcode5,
title= "Population density",
fill=attr(colcode, "palette"),
cex= 0.56, bty="n", border=FALSE)
plotvar<-(mapDen$POP_DENS)^(1/10)
nclr<- 8 # number of bins (3-8)
min<- floor(min(plotvar))
max<- ceiling(max(plotvar))
breaks<- (max-min) / nclr
plotclr<- brewer.pal(nclr, "Reds")
class<- classIntervals(plotvar, nclr, style ="fixed", fixedBreaks=seq(min, max, breaks))
colcode<- findColours(class, plotclr)
colcode2<-gsub(",","-", gsub("[[]|[)]|[]]","", names(attr(colcode, "table"))))
colcode3 <- round(as.numeric(unlist(strsplit(colcode2, "-")))^10, digits=0)
colcode4 <- c()
for (i in seq(1, length(colcode3),2)){
colcode4[i] <- paste0(colcode3[i], "-", colcode3[i+1])
}
colcode5 <- colcode4[seq(1, length(colcode4),2)]
### Plot the Map
plot(mapDen, border=FALSE, fill=TRUE, col=colcode)# ONCE YOUVE DEFINED PLOT VAR
###Add a Legend
legend("topleft",
legend = colcode5,
title= "Population density",
fill=attr(colcode, "palette"),
cex= 0.56, bty="n", border=FALSE)
plotvar<-(mapDen$POP_DENS)^(1/4)
nclr<- 8 # number of bins (3-8)
min<- floor(min(plotvar))
max<- ceiling(max(plotvar))
breaks<- (max-min) / nclr
plotclr<- brewer.pal(nclr, "Reds")
class<- classIntervals(plotvar, nclr, style ="fixed", fixedBreaks=seq(min, max, breaks))
colcode<- findColours(class, plotclr)
colcode2<-gsub(",","-", gsub("[[]|[)]|[]]","", names(attr(colcode, "table"))))
colcode3 <- round(as.numeric(unlist(strsplit(colcode2, "-")))^4, digits=0)
colcode4 <- c()
for (i in seq(1, length(colcode3),2)){
colcode4[i] <- paste0(colcode3[i], "-", colcode3[i+1])
}
colcode5 <- colcode4[seq(1, length(colcode4),2)]
### Plot the Map
plot(mapDen, border=FALSE, fill=TRUE, col=colcode)# ONCE YOUVE DEFINED PLOT VAR
###Add a Legend
legend("topleft",
legend = colcode5,
title= "Population density",
fill=attr(colcode, "palette"),
cex= 0.56, bty="n", border=FALSE)
plotvar<-(mapDen$POP_DENS)^(1/5)
nclr<- 8 # number of bins (3-8)
min<- floor(min(plotvar))
max<- ceiling(max(plotvar))
breaks<- (max-min) / nclr
plotclr<- brewer.pal(nclr, "Reds")
class<- classIntervals(plotvar, nclr, style ="fixed", fixedBreaks=seq(min, max, breaks))
colcode<- findColours(class, plotclr)
colcode2<-gsub(",","-", gsub("[[]|[)]|[]]","", names(attr(colcode, "table"))))
colcode3 <- round(as.numeric(unlist(strsplit(colcode2, "-")))^5, digits=0)
colcode4 <- c()
for (i in seq(1, length(colcode3),2)){
colcode4[i] <- paste0(colcode3[i], "-", colcode3[i+1])
}
colcode5 <- colcode4[seq(1, length(colcode4),2)]
### Plot the Map
plot(mapDen, border=FALSE, fill=TRUE, col=colcode)# ONCE YOUVE DEFINED PLOT VAR
###Add a Legend
legend("topleft",
legend = colcode5,
title= "Population density",
fill=attr(colcode, "palette"),
cex= 0.56, bty="n", border=FALSE)
plotvar<-(mapDen$POP_DENS)^(1/4.5)
nclr<- 8 # number of bins (3-8)
min<- floor(min(plotvar))
max<- ceiling(max(plotvar))
breaks<- (max-min) / nclr
plotclr<- brewer.pal(nclr, "Reds")
class<- classIntervals(plotvar, nclr, style ="fixed", fixedBreaks=seq(min, max, breaks))
colcode<- findColours(class, plotclr)
colcode2<-gsub(",","-", gsub("[[]|[)]|[]]","", names(attr(colcode, "table"))))
colcode3 <- round(as.numeric(unlist(strsplit(colcode2, "-")))^4.5, digits=0)
colcode4 <- c()
for (i in seq(1, length(colcode3),2)){
colcode4[i] <- paste0(colcode3[i], "-", colcode3[i+1])
}
colcode5 <- colcode4[seq(1, length(colcode4),2)]
### Plot the Map
plot(mapDen, border=FALSE, fill=TRUE, col=colcode)# ONCE YOUVE DEFINED PLOT VAR
###Add a Legend
legend("topleft",
legend = colcode5,
title= "Population density",
fill=attr(colcode, "palette"),
cex= 0.56, bty="n", border=FALSE)
summary(mapDen)
save.image("E:/workingdirectory/haiti/meeting2014-04-11/mapAndDensity.RData")
plot(map0, border=adjustcolor("black", alpha.f=0.3), add=TRUE)
plot(map1, border=adjustcolor("black", alpha.f=0.3), add=TRUE)
labelpos <- data.frame(do.call(rbind, lapply(mapDen@polygons, function(x) x@labpt)))
names(labelpos) <- c("x","y")
mapDen@data <- data.frame(mapDen@data, labelpos)
mapDen$labelpos <- labelpos
mapDen$labelposx <- labelpos$x
mapDen$labelposy <- labelpos$y
zippy <- unique(sort(mapDen$POP_DENS))
zippy <- as.character(zippy)
mapDen$text <- 1
for (i in zippy){mapDen$text[which(mapDen$POP_DENS == i)] <- i }
text(labelpos$x, labelpos$y, label=mapDen$text, cex=0.1, col=adjustcolor("black", alpha.f=0.4))
summary(mapDen)
plot(mapDen, border=FALSE, fill=TRUE, col=colcode)# ONCE YOUVE DEFINED PLOT VAR
zippy2 <- unique(sort(mapDen$COMMUNE))
zippy <- as.character(zippy)
mapDen$text2 <- 1
for (i in zippy){mapDen$text2[which(mapDen$COMMUNE == i)] <- i }
text(labelpos$x, labelpos$y, label=mapDen$text2, ,
cex=0.1, col=adjustcolor("black", alpha.f=0.4))
mapDen$COMMUNE
zippy2 <- unique(sort(mapDen$COMMUNE))
mapDen$text2 <- 1
for (i in zippy){mapDen$text2[which(mapDen$COMMUNE == i)] <- i }
text(labelpos$x, labelpos$y, label=mapDen$text2, ,
cex=0.1, col=adjustcolor("black", alpha.f=0.4))
zippy2 <- unique(sort(mapDen$COMMUNE))
warnings()
mapDen$COMMUNE
zippy2 <- unique(sort(mapDen$COMMUNE))
zippy <- as.character(zippy)
mapDen$COMMUNE <- as.character(mapDen$COMMUNE)
mapDen$text2 <- 1
for (i in zippy){mapDen$text2[which(mapDen$COMMUNE == i)] <- i }
text(labelpos$x, labelpos$y, label=mapDen$text2, ,
cex=0.1, col=adjustcolor("black", alpha.f=0.4))
mapDen$text2
save.image("E:/workingdirectory/haiti/meeting2014-04-11/mapAndDensity.RData")
summary(mapDen)
zippy2 <- unique(sort(mapDen$COMMUNE))
zippy2 <- as.character(zippy2)
mapDen$COMMUNE <- as.character(mapDen$COMMUNE)
mapDen$text2 <- 1
for (i in zippy2){mapDen$text2[which(mapDen$COMMUNE == i)] <- i }
text(labelpos$x, labelpos$y, label=mapDen$text2, ,
cex=0.1, col=adjustcolor("black", alpha.f=0.4))
labelpos <- data.frame(do.call(rbind, lapply(mapDen@polygons, function(x) x@labpt)))
names(labelpos) <- c("x","y")
mapDen@data <- data.frame(mapDen@data, labelpos)
mapDen$labelpos <- labelpos
mapDen$labelposx <- labelpos$x
mapDen$labelposy <- labelpos$y
zippy <- unique(sort(mapDen$POP_DENS))
zippy <- as.character(zippy)
mapDen$text <- 1
for (i in zippy){mapDen$text[which(mapDen$POP_DENS == i)] <- i }
text(labelpos$x, labelpos$y, label=round(mapDen$text, digits=1),
cex=0.1, col=adjustcolor("black", alpha.f=0.4))
zippy2 <- unique(sort(mapDen$COMMUNE))
zippy2 <- as.character(zippy2)
mapDen$COMMUNE <- as.character(mapDen$COMMUNE)
mapDen$text2 <- 1
for (i in zippy2){mapDen$text2[which(mapDen$COMMUNE == i)] <- i }
text(labelpos$x, labelpos$y, label=mapDen$text2, ,
cex=0.0.5, col=adjustcolor("black", alpha.f=0.4))
save.image("E:/workingdirectory/haiti/meeting2014-04-11/mapAndDensity.RData")
summary(mapDen)
map3$color <- adjustcolor("black", alpha.f=0.2)
labelpos <- data.frame(do.call(rbind, lapply(map3@polygons, function(x) x@labpt)))
names(labelpos) <- c("x","y")
map3@data <- data.frame(map3@data, labelpos)
map3$labelpos <- labelpos
map3$labelposx <- labelpos$x
map3$labelposy <- labelpos$y
zippy3 <- unique(sort(map3$NAME_3))
zippy3 <- as.character(zippy3)
map3$text <- 1
for (i in zippy3){map3$text[which(map3$NAME_3 == i)] <- i }
text(labelpos$x, labelpos$y, label=map3$text, cex=0.1, col=adjustcolor("black", alpha.f=0.4))
for (i in zippy3){map3$text3[which(map3$NAME_3 == i)] <- i }
text(labelpos$x, labelpos$y, label=map3$text3, cex=0.1, col=adjustcolor("black", alpha.f=0.4))
labelpos <- data.frame(do.call(rbind, lapply(map3@polygons, function(x) x@labpt)))
names(labelpos) <- c("x","y")
map3@data <- data.frame(map3@data, labelpos)
map3$labelpos <- labelpos
map3$labelposx <- labelpos$x
map3$labelposy <- labelpos$y
zippy3 <- unique(sort(map3$NAME_3))
zippy3 <- as.character(zippy3)
map3$text <- 1
for (i in zippy3){map3$text3[which(map3$NAME_3 == i)] <- i }
text(labelpos$x, labelpos$y, label=map3$text3, cex=0.1, col=adjustcolor("black", alpha.f=0.4))
library(maptools)
library(maps)
library(RColorBrewer)
library(classInt)
mapDen <- readShapePoly("E:/workingdirectory/gis/haiti/popDensity/Haiti_ADM3_stats.shp")
plot(mapDen)
summary(mapDen)
labelpos <- data.frame(do.call(rbind, lapply(map3@polygons, function(x) x@labpt)))
names(labelpos) <- c("x","y")
map3@data <- data.frame(map3@data, labelpos)
map3$labelpos <- labelpos
map3$labelposx <- labelpos$x
map3$labelposy <- labelpos$y
zippy3 <- unique(sort(map3$NAME_3))
zippy3 <- as.character(zippy3)
map3$text3 <- 1
for (i in zippy3){map3$text3[which(map3$NAME_3 == i)] <- i }
text(labelpos$x, labelpos$y, label=map3$text3, cex=0.1, col=adjustcolor("black", alpha.f=0.4))
save.image("E:/workingdirectory/haiti/meeting2014-04-11/mapAndDensity.RData")
plot(mapDen, border=FALSE, fill=TRUE, col=colcode)# ONCE YOUVE DEFINED PLOT VAR
labelpos2 <- data.frame(do.call(rbind, lapply(mapDen@polygons, function(x) x@labpt)))
names(labelpos2) <- c("x","y")
mapDen@data <- data.frame(mapDen@data, labelpos2)
mapDen$labelpos2 <- labelpos2
mapDen$labelpos2x <- labelpos2$x
mapDen$labelpos2y <- labelpos2$y
zippy <- unique(sort(mapDen$POP_DENS))
zippy <- as.character(zippy)
mapDen$text <- 1
for (i in zippy){mapDen$text[which(mapDen$POP_DENS == i)] <- i }
text(labelpos2$x, labelpos2$y, label=round(mapDen$text, digits=1),
cex=0.1, col=adjustcolor("black", alpha.f=0.4))
mapDen$text
text(labelpos2$x, labelpos2$y, label=round(as.numeric(mapDen$text), digits=1),
cex=0.1, col=adjustcolor("black", alpha.f=0.4))
zippy2 <- unique(sort(mapDen$COMMUNE))
zippy2 <- as.character(zippy2)
mapDen$COMMUNE <- as.character(mapDen$COMMUNE)
mapDen$text2 <- 1
for (i in zippy2){mapDen$text2[which(mapDen$COMMUNE == i)] <- i }
text(labelpos2$x, labelpos2$y, label=mapDen$text2, ,
cex=0.5, col=adjustcolor("black", alpha.f=0.4))
save.image("E:/workingdirectory/haiti/meeting2014-04-11/mapAndDensity.RData")
summary(map3$color)
summary(factor(map3$color))
map3$color[which(grepl("Carrefour", map3$NAME_3)==TRUE)] <- adjustcolor("darkred", alpha.f=0.75)
map3$color[which(grepl("Thomonde", map3$NAME_3)==TRUE)] <- adjustcolor("darkgreen", alpha.f=0.75)
summary(factor(map3$color))
save.image("E:/workingdirectory/haiti/meeting2014-04-11/mapAndDensity.RData")
startDate <- "2008-04-01"
365*5
nDays <- 2100
startDate + nDays
linkPart1 <- "http://www.wunderground.com/history/airport/KGNV/"
linkPart3 <-  "/DailyHistory.html"
ts <- as.data.frame(c(as.Date(startDate, format="%Y-%m-%d"),
as.Date(startDate, format="%Y-%m-%d")+1:(nDays-1)))
colnames(ts) <- "date"
ts$dateRec <- format(ts$date, format="%Y/%m/%d")
library(ping)
library(pingr)
ping()
ping(1)
ping(2)
ping(3)
#THE FOLLOWING SCRIPT TAKES RAINFALL DATA FROM WUNDERGROUND
#THE NAs SHOW UP BECAUSE OF THIS MYSTERIOUS T
library(pingr)
#Establish start and end dates
startDate <- "2008-04-01"
nDays <- 2100
#Set up URL
linkPart1 <- "http://www.wunderground.com/history/airport/KGNV/"
linkPart3 <-  "/DailyHistory.html"
ts <- as.data.frame(c(as.Date(startDate, format="%Y-%m-%d"),
as.Date(startDate, format="%Y-%m-%d")+1:(nDays-1)))
colnames(ts) <- "date"
ts$dateRec <- format(ts$date, format="%Y/%m/%d")
ts$pui <- NA
for (i in 1:nrow(ts)){
linkPart2 <- ts$dateRec[i]
link <- paste0(linkPart1, linkPart2, linkPart3)
webPage <- readLines(link)
webPage <- webPage[grepl("  <span class=\"nobr\"><span class=\"b\">", webPage) &
grepl("</span>&nbsp;in</span>", webPage)][1]
ts$pui[i] <- as.numeric(gsub(paste0("  <span class=\"nobr\"><span class=\"b\">",
"|", "</span>&nbsp;in</span>"),
"",
webPage))
}
ts$rain <- ts$pui
ts$pui <- NULL
ts$rain[is.na(ts$rain)] <- 0
ping(3)
write.csv(ts, "E:/workingdirectory/mosquito/rainFall2013/rain2008-2013.csv")
ping(8)
ts$temp <- NA
for (i in 1:nrow(ts)){
linkPart2 <- ts$dateRec[5]
link <- paste0(linkPart1, linkPart2, linkPart3)
webPage <- readLines(link)
webPage <- webPage[grepl("  <span class=\"nobr\"><span class=\"b\">", webPage) &
grepl("</span>&nbsp", webPage)][1]
ts$temp <- as.numeric(gsub(paste0("  <span class=\"nobr\"><span class=\"b\">",
"|", "</span>&nbsp;&deg;F</span>"), "", webPage))
}
write.csv(ts, "E:/workingdirectory/mosquito/rainFall2013/rainAndTemp2008-2013.csv")
ping(8)
View(ts)
ts$temp <- NA
for (i in 1:nrow(ts)){
linkPart2 <- ts$dateRec[i]
link <- paste0(linkPart1, linkPart2, linkPart3)
webPage <- readLines(link)
webPage <- webPage[grepl("  <span class=\"nobr\"><span class=\"b\">", webPage) &
grepl("</span>&nbsp", webPage)][1]
ts$temp <- as.numeric(gsub(paste0("  <span class=\"nobr\"><span class=\"b\">",
"|", "</span>&nbsp;&deg;F</span>"), "", webPage))
}
View(ts)
ts$dateRec
linkPart2 <- ts$dateRec[5]
webPage <- webPage[grepl("  <span class=\"nobr\"><span class=\"b\">", webPage) &
grepl("</span>&nbsp", webPage)][1]
webPage
linkPart2 <- ts$dateRec[7]
webPage <- webPage[grepl("  <span class=\"nobr\"><span class=\"b\">", webPage) &
grepl("</span>&nbsp", webPage)][1]
webPage
linkPart2 <- ts$dateRec[50]
link <- paste0(linkPart1, linkPart2, linkPart3)
webPage <- readLines(link)
webPage <- webPage[grepl("  <span class=\"nobr\"><span class=\"b\">", webPage) &
grepl("</span>&nbsp", webPage)][1]
webPage
library(pingr)
ping(10)
ping(9)
startDate <- "2008-04-01"
nDays <- 2100
#Set up URL
linkPart1 <- "http://www.wunderground.com/history/airport/KGNV/"
linkPart3 <-  "/DailyHistory.html"
startDate <- "2008-03-01"
nDays <- 2100
#Set up URL
linkPart1 <- "http://www.wunderground.com/history/airport/KGNV/"
linkPart3 <-  "/DailyHistory.html"
ts <- as.data.frame(c(as.Date(startDate, format="%Y-%m-%d"),
as.Date(startDate, format="%Y-%m-%d")+1:(nDays-1)))
max(ts$Date)
ts$date
colnames(ts) <- "date"
max(ts$date)
startDate <- "2008-03-01"
nDays <- 2200
#Set up URL
linkPart1 <- "http://www.wunderground.com/history/airport/KGNV/"
linkPart3 <-  "/DailyHistory.html"
ts <- as.data.frame(c(as.Date(startDate, format="%Y-%m-%d"),
as.Date(startDate, format="%Y-%m-%d")+1:(nDays-1)))
colnames(ts) <- "date"
ts$dateRec <- format(ts$date, format="%Y/%m/%d")
write.csv(ts, "C:/Users/BrewJR/Desktopmosquito/rainFall2013/rain2008-2013.csv")
write.csv(ts, "C:/Users/BrewJR/Desktop/mosquito/rainFall2013/rain2008-2013.csv")
install.packages("weatherData")
library(weatherData)
library(weatherData)
getWeatherForDate("GNV", "2013-01-01")
getWeatherForDate("GNV", "2014-04-14")
getDailyMinMaxTemp(station_id = "GNV",
start_date = "2008-03-01",
end_date = "2013-12-01")
getDailyMinMaxTemp(station_id = "GNV",
start_date = "2008-03-01",
end_date = "2008-03-15")
ts <- as.data.frame(
getDailyMinMaxTemp(station_id = "GNV",
start_date = "2008-03-01",
end_date = "2008-03-15")
)
View(ts)
library(weatherData)
getWeatherForDate("GNV", "2014-04-14")
ts <- as.data.frame(
getDailyMinMaxTemp(station_id = "GNV",
start_date = "2008-03-01",
end_date = "2013-12-01")
)
View(ts)
head(ts)
substr(1,8,ts$TimeMin)
substr(1,5,ts$TimeMin)
substr(1,10,ts$TimeMin)
ts$TimeMin
substr(ts$TimeMin, 1, 10)
substr(ts$TimeMin, 1, 9)
ts$date <- as.Date(substr(ts$TimeMin, 1, 10),
format="%Y-%m-%d")
View(ts)
write.csv(ts, "E:/workingdirectory/mosquito/rainFall2013/tsHeat13.csv")
write.csv(ts, "E:/workingdirectory/mosquito/rainFall2013/tsTemp2008-2013.csv")
library(pingr)
#########################################
#READ IN THE RAIN TIME SERIES DATA [CREATED FROM WEBSCRAPING WUNDERGROUND]
#READ IN MOSQUITO TIME SERIES DATA [CREATED FROM 2013 MOSQ SEASON SURVEIL]
#########################################
tsRain <- read.csv("E:/workingdirectory/mosquito/rainFall2013/rain2008-2013.csv")
tsMosq <- read.csv("E:/workingdirectory/mosquito/simple.csv")
tsTemp <- read.csv("E:/workingdirectory/mosquito/rainFall2013/tsTemp2008-2013.csv")
#########################################
#CONVERT DATES INTO R DATE OBJECTS
#########################################
tsRain$date <- as.Date(tsRain$date, format="%Y-%m-%d")
tsMosq$date <- as.Date(tsMosq$date, format="%m/%d/%Y")
tsTemp$date <- as.Date(tsTemp$date, format="%Y-%m-%d")
#########################################
#CREATE A MASTER TS
#########################################
ts <- as.data.frame(tsRain$date)
colnames(ts) <- "date"
#########################################
#ADD RAIN TO TS
#########################################
ts$rain <- tsRain$rain
#########################################
#ADD MOSQUITOES (TOTAL AND VECTOR) TO TS
# (NOTE, THESE ARE MOSQUITOES PER TRAP)
#########################################
ts$total <- NA
for (i in tsMosq$date){
ts$total[which(ts$date == i)] <-
tsMosq$total[which(tsMosq$date == i)]
}
ts$vector <- NA
for (i in tsMosq$date){
ts$vector[which(ts$date == i)] <-
tsMosq$vector[which(tsMosq$date == i)]
}
#########################################
#ADD MINIMUM TEMP TO TS
#########################################
ts$minTemp <- NA
for (i in ts$date){
ts$minTemp[which(ts$date == i)] <-
tsTemp$MinTemp[which(tsTemp$date == i)]
}
ts$minTemp[which(ts$minTemp < -100)] <- NA
#########################################
#ADD MAXIMUM TEMP TO TS
#########################################
ts$maxTemp <- NA
for (i in ts$date){
ts$maxTemp[which(ts$date == i)] <-
tsTemp$MaxTemp[which(tsTemp$date == i)]
}
ping()
View(ts)
#Make columns for a range of 5-20 days old, plus 5-20 days older than that
for (j in 5:20){
for (k in 5:20){
tsRain[,paste0("rain", j, ".", j+k)] <- NA
}
}
View(ts)
ts2 <- as.data.frame()
#Make columns for a range of 5-20 days old, plus 5-20 days older than that
for (j in 5:20){
for (k in 5:20){
ts[,paste0("rain", j, ".", j+k)] <- NA
}
}
View(ts)
for (j in 5:20){
for (k in 5:20){
ts[,paste0("rain", j, ".", j+k)] <- NA
ts[,paste0("maxTemp", j, ".", j+k)] <- NA
}
}
View(ts)
#Make columns for a range of 5-20 days old, plus 5-20 days older than that
for (j in 5:20){
for (k in 5:20){
ts2[,paste0("rain", j, ".", j+k)] <- NA
ts2[,paste0("maxTemp", j, ".", j+k)] <- NA
}
}
ts2 <- ts
ts2 <- ts
#Make columns for a range of 5-20 days old, plus 5-20 days older than that
for (j in 5:20){
for (k in 5:20){
ts2[,paste0("rain", j, ".", j+k)] <- NA
ts2[,paste0("maxTemp", j, ".", j+k)] <- NA
}
}
colnames(ts2)
View(ts2)
colnames(ts2)[grepl("maxTemp", colnames(ts2))]
setwd("E:/workingdirectory/phc6053/ass8")
##############################
# USE THE SAS7BDAT PACKAGE TO READ IN THE DATA
##############################
library(sas7bdat)
setwd("E:/workingdirectory/phc6053/ass8")
library(sas7bdat)
install.packages("sas7bdat")
