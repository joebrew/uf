load("/media/joebrew/JB/fdoh/private/ben/screen.RData")
rm(lms, lms1, lms2,
screen07, screen08, screen09,
screen10, screen11, screen12,
screen13, i, delFun)
load("/media/joebrew/JB/fdoh/private/ben/flu.RData")
head(dat)
head(screen)
screen$id <- screen$PersonID
head(screen)
str(screen$Health_Screening_Date)
screen$date <- as.Date(screen$Health_Screening_Date, format = "%Y-%m-%d")
hist(screen$date, breaks = 100)
screen <- screen[which(screen$date >= "2011-08-01"),]
hist(as.numeric(format(screen$date, format = "%j")))
screen <- screen[which(as.numeric(format(screen$date, format = "%j")) > 200),]
dat$year
screen$year <- as.numeric(format(screen$date, format = "%Y"))
table(screen$year)
table
table(screen$year)
x <- merge(x = screen,
y = dat,
all.x = TRUE,
all.y = FALSE,
by = c("id", "year"))
head(x)
load("/media/joebrew/JB/fdoh/private/ben/screen.RData")
rm(lms, lms1, lms2,
screen07, screen08, screen09,
screen10, screen11, screen12,
screen13, i, delFun)
# Get id
screen$id <- screen$PersonID
# Remove prior to 2011
screen$date <- as.Date(screen$Health_Screening_Date, format = "%Y-%m-%d")
screen <- screen[which(screen$date >= "2011-08-01"),]
# Remove spring screenings
hist(as.numeric(format(screen$date, format = "%j")))
screen <- screen[which(as.numeric(format(screen$date, format = "%j")) > 200),]
# Add year column
screen$year <- as.numeric(format(screen$date, format = "%Y"))
flu <- read.csv("/media/joebrew/JB/fdoh/private/ben/dat.csv")
head(flu)
head(screen)
x <- merge(x = screen,
y = dat,
all.x = TRUE,
all.y = FALSE,
by = c("personID", "year"))
x <- merge(x = screen,
y = flu,
all.x = TRUE,
all.y = FALSE,
by = c("personID", "year"))
dat$personID
flu$personID
screen$personID
screen$personID <- screen$PersonID
x <- merge(x = screen,
y = flu,
all.x = TRUE,
all.y = FALSE,
by = c("personID", "year"))
head(x)
library(plyr)
?join
x <- join(x = screen,
y = flu,
type = "left",
match = "first",
by = c("personID", "year"))
head(x)
table(is.na(x$dob))
library(dplyr)
install.packages("dplyr")
library(dplyr)
version()
Version()
session()
Session.info()
?session.info
install.packages("dplyr")
update.packages()
library(plyr)
library(dplyr)
install.packages("dplyr")
install.packages("randomForest")
install.packages(dplyr)
install.packages("dplyr")
library(devtools)
install_github("hadley/dplyr")
library(dplyr)
library(dplyr)
install.packages("dplyr")
# Load obesity data
load("/media/joebrew/JB/fdoh/private/ben/screen.RData")
rm(lms, lms1, lms2,
screen07, screen08, screen09,
screen10, screen11, screen12,
screen13, i, delFun)
# Get id
screen$personID <- screen$PersonID
# Remove prior to 2011
screen$date <- as.Date(screen$Health_Screening_Date, format = "%Y-%m-%d")
screen <- screen[which(screen$date >= "2011-08-01"),]
# Remove spring screenings
hist(as.numeric(format(screen$date, format = "%j")))
screen <- screen[which(as.numeric(format(screen$date, format = "%j")) > 200),]
# Add year column
screen$year <- as.numeric(format(screen$date, format = "%Y"))
# Load flu data
flu <- read.csv("/media/joebrew/JB/fdoh/private/ben/dat.csv")
# join by id
library(plyr)
x <- join(x = screen,
y = flu,
type = "left",
match = "first",
by = c("personID", "year"))
# clean up
library(dplyr)
x <- join(x = screen,
library(plyr)
library(plyr)
install.packages("plyr")
# Load obesity data
load("/media/joebrew/JB/fdoh/private/ben/screen.RData")
rm(lms, lms1, lms2,
screen07, screen08, screen09,
screen10, screen11, screen12,
screen13, i, delFun)
# Get id
screen$personID <- screen$PersonID
# Remove prior to 2011
screen$date <- as.Date(screen$Health_Screening_Date, format = "%Y-%m-%d")
screen <- screen[which(screen$date >= "2011-08-01"),]
# Remove spring screenings
hist(as.numeric(format(screen$date, format = "%j")))
screen <- screen[which(as.numeric(format(screen$date, format = "%j")) > 200),]
# Add year column
screen$year <- as.numeric(format(screen$date, format = "%Y"))
# Load flu data
flu <- read.csv("/media/joebrew/JB/fdoh/private/ben/dat.csv")
# join by id
library(plyr)
x <- join(x = screen,
y = flu,
type = "left",
match = "first",
by = c("personID", "year"))
# clean up
library(dplyr)
names(x)
head(x)
y <- x %>%
select(personID)
y <- x %>%
select(year)
y <- x[,c("year", "School_Name", "Grade", "Race", "Gender",
"Age_Years", "Age_Months", "Growth_Height", "Growth_Weight", "Lunch_Status",
"bmi", "Z", "cat", "catbi", "cf", "lunchbi", "lunch", "racebi", "race", "teacher")]
y <- x[,c("year", "School_Name", "Grade", "Race", "Gender",
"Age_Years", "Age_Months", "Growth_Height", "Growth_Weight", "Lunch_Status",
"bmi", "Z", "cat", "catbi", "cf", "lunchbi", "lunch", "racebi",
"race", "teacher", "intern")]
nrow(y[which(is.na(y$intern)),])
y <- y[which(!is.na(y$intern)),]
head(y)
row.names(y)
row.names(y) <- NULL
head(y)
y$intern <- NULL
table(y$Race == y$race)
y$Race <- NULL
y$Lunch_Status <- NULL
table(y$Race == y$race)
head(y)
table(y$racebi)
getwd()
write.csv(y, "/media/joebrew/JB/fdoh/private/ben/health_data.csv")
library(rgdal)
install.packages("rgdal")
install.packages("rgdal")
library(rgdal)
install.packages("rgdal")
al <- readOGR("/home/joebrew/Desktop/Building_Footprints", "Building_Footprints")
library(rgdal)
al <- readOGR("/home/joebrew/Desktop/Building_Footprints", "Building_Footprints")
al <- readOGR("/home/joebrew/Desktop/Building_Footprints", "Building Footprints")
?pdf
getwd()
pdf(file = "/home/joebrew/Desktop/alachua_map")
plot(al)
dev.off()
head(al)
summary(al)
al2 <- al[1:100,]
plot(al2)
plot(al2, col = "black", border = NA)
plot(al2, col = "black", border = FALSE)
pdf(file = "/home/joebrew/Desktop/alachua_map")
plot(al2, col = "black", border = FALSE)
dev.off()
pdf(file = "/home/joebrew/Desktop/alachua_map")
plot(al, col = "black", border = FALSE)
dev.off()
shiny::runApp('ShinyApps/tobacco')
install_github('rCharts/ramnathv')
library(devtools)
install_github('rCharts/ramnathv')
install_github('ramnathv/rCharts')
library(shiny)
install.packages("shiny")
install.packages("devtools")
library(devtools)
install_github("joebrew/rpackages", subdir = "ai")
install_github('ramnathv/rCharts')
install_github("rstudio/shinyapps")
install.packages("rgdal")
install_github("joebrew/rpackages", subdir = "ai")
install.packages("Hmisc")
install_github("joebrew/rpackages", subdir = "ai")
install.packages("data.table")
install_github("joebrew/rpackages", subdir = "ai")
install.packages("TeachingDemos") # for easy sink(")ing
install.packages("dplyr")
install.packages("TeachingDemos") # for easy sink(")ing
install.packages("lmtest")
install.packages("boot")
install.packages("arm")
install.packages("classInt")
install.packages("plyr")
install.packages("sqldf")
install.packages("RColorBrewer")
install.packages("xtable")
install.packages("gdata")
install.packages("maps")
install.packages("mapdata")
install.packages("maptools")
install.packages("rJava")
install.packages("OpenStreetMap")
install.packages("shapefiles")
install.packages("SemiPar")
install.packages("wordcloud")
install.packages("RCurl")
install.packages("googleVis")
install.packages("RCurl")
library(rgdal)
library(gstat)
library(geoR)
library(rgdal)
install.packages("gstat")
install.packages("geoR")
library(rgdal)
library(gstat)
library(geoR)
library(RColorBrewer)
# Set wd
setwd("~/uf/phc6194/hw7")
install.packages("RandomFields")
install.packages("tkrplot")
install.packages("tkrplot")
install.packages("RandomFields")
install.packages("tkrplot")
library(rgdal)
library(gstat)
library(geoR)
library(RColorBrewer)
# Set wd
#setwd("uf/phc6194/hw7")
# Read in data
s1 <- readOGR("data", "SubSample1")
setwd("uf/phc6194/hw7")
setwd("/home/joebrew/Documentsuf/phc6194/hw7")
getwd()
setwd("/home/joebrew/Documents/uf/phc6194/hw7")
# Attach necessary spatial packages
library(rgdal)
library(gstat)
library(geoR)
library(RColorBrewer)
# Set wd
setwd("/home/joebrew/Documents/uf/phc6194/hw7")
# Read in data
s1 <- readOGR("data", "SubSample1")
s2 <- readOGR("data", "SubSample2")
xcol <- colorRampPalette(c("green", "red"))(max(ceiling(s1$PM25)))
plot(s1, pch = 16, col = xcol[ceiling(s1$PM25)])
points(s2, col = "black", pch = "?")
voronoipolygons <- function(x) {
require(deldir)
require(sp)
if (.hasSlot(x, 'coords')) {
crds <- x@coords
} else crds <- x
z <- deldir(crds[,1], crds[,2])
w <- tile.list(z)
polys <- vector(mode='list', length=length(w))
for (i in seq(along=polys)) {
pcrds <- cbind(w[[i]]$x, w[[i]]$y)
pcrds <- rbind(pcrds, pcrds[1,])
polys[[i]] <- Polygons(list(Polygon(pcrds)), ID=as.character(i))
}
SP <- SpatialPolygons(polys)
voronoi <- SpatialPolygonsDataFrame(SP, data=data.frame(x=crds[,1],
y=crds[,2], row.names=sapply(slot(SP, 'polygons'),
function(x) slot(x, 'ID'))))
}
# Create thissen polygon version of s1 (training data)
s1poly <- voronoipolygons(s1)
s1poly@data <- s1@data
# Define projection string for s1poly
proj4string(s1poly) <- proj4string(s1)
x <- over(s2, polygons(s1poly))
# Monthly aod
s2$MonthlyAOD.p <- NA
for (i in 1:nrow(s2)){
ind <- x[i]
s2$MonthlyAOD.p[i] <-
s1poly$MonthlyAOD[ind]
}
# PM25
s2$PM25.p <- NA
for (i in 1:nrow(s2)){
ind <- x[i]
s2$PM25.p[i] <-
s1poly$PM25[ind]
}
# Plot Correlation between monthly AOD true and predicted
JoePlot <- function(x,y){
plot(x,y,
xlab = "Predicted",
ylab = "Observed",
pch = 16,
col = adjustcolor("black", alpha.f = 0.5))
mylm <- lm(y ~x)
abline(mylm, col = adjustcolor("darkred", alpha.f = 0.6))
mycor <- cor(x,y)
text(0.9*max(x),
1.2*min(y),
labels = paste0("Correlation coefficient:\n", round(mycor, digits =2)))
}
JoePlot(s2$MonthlyAOD.p, s2$MonthlyAOD)
JoePlot(s2$PM25.p, s2$PM25)
# Calculate error
ErrorCalc <- function(x,y){
z <- x-y
z[which(z <= 0)] <- z[which(z <= 0)] * -1
return(z)
}
s2$error <- ErrorCalc(s2$PM25.p, s2$PM25)
# Explore error
hist(s2$error, main ="Histogram of error")
plot(mytris) # prediction triangles
