load("/media/joebrew/JB/fdoh/private/ben/screen.RData")
rm(lms, lms1, lms2,
screen07, screen08, screen09,
screen10, screen11, screen12,
screen13, i, delFun)
load("/media/joebrew/JB/fdoh/private/ben/flu.RData")
head(dat)
head(screen)
screen$id <- screen$PersonID
head(screen)
str(screen$Health_Screening_Date)
screen$date <- as.Date(screen$Health_Screening_Date, format = "%Y-%m-%d")
hist(screen$date, breaks = 100)
screen <- screen[which(screen$date >= "2011-08-01"),]
hist(as.numeric(format(screen$date, format = "%j")))
screen <- screen[which(as.numeric(format(screen$date, format = "%j")) > 200),]
dat$year
screen$year <- as.numeric(format(screen$date, format = "%Y"))
table(screen$year)
table
table(screen$year)
x <- merge(x = screen,
y = dat,
all.x = TRUE,
all.y = FALSE,
by = c("id", "year"))
head(x)
load("/media/joebrew/JB/fdoh/private/ben/screen.RData")
rm(lms, lms1, lms2,
screen07, screen08, screen09,
screen10, screen11, screen12,
screen13, i, delFun)
# Get id
screen$id <- screen$PersonID
# Remove prior to 2011
screen$date <- as.Date(screen$Health_Screening_Date, format = "%Y-%m-%d")
screen <- screen[which(screen$date >= "2011-08-01"),]
# Remove spring screenings
hist(as.numeric(format(screen$date, format = "%j")))
screen <- screen[which(as.numeric(format(screen$date, format = "%j")) > 200),]
# Add year column
screen$year <- as.numeric(format(screen$date, format = "%Y"))
flu <- read.csv("/media/joebrew/JB/fdoh/private/ben/dat.csv")
head(flu)
head(screen)
x <- merge(x = screen,
y = dat,
all.x = TRUE,
all.y = FALSE,
by = c("personID", "year"))
x <- merge(x = screen,
y = flu,
all.x = TRUE,
all.y = FALSE,
by = c("personID", "year"))
dat$personID
flu$personID
screen$personID
screen$personID <- screen$PersonID
x <- merge(x = screen,
y = flu,
all.x = TRUE,
all.y = FALSE,
by = c("personID", "year"))
head(x)
library(plyr)
?join
x <- join(x = screen,
y = flu,
type = "left",
match = "first",
by = c("personID", "year"))
head(x)
table(is.na(x$dob))
library(dplyr)
install.packages("dplyr")
library(dplyr)
version()
Version()
session()
Session.info()
?session.info
install.packages("dplyr")
update.packages()
library(plyr)
library(dplyr)
install.packages("dplyr")
install.packages("randomForest")
install.packages(dplyr)
install.packages("dplyr")
library(devtools)
install_github("hadley/dplyr")
library(dplyr)
library(dplyr)
install.packages("dplyr")
# Load obesity data
load("/media/joebrew/JB/fdoh/private/ben/screen.RData")
rm(lms, lms1, lms2,
screen07, screen08, screen09,
screen10, screen11, screen12,
screen13, i, delFun)
# Get id
screen$personID <- screen$PersonID
# Remove prior to 2011
screen$date <- as.Date(screen$Health_Screening_Date, format = "%Y-%m-%d")
screen <- screen[which(screen$date >= "2011-08-01"),]
# Remove spring screenings
hist(as.numeric(format(screen$date, format = "%j")))
screen <- screen[which(as.numeric(format(screen$date, format = "%j")) > 200),]
# Add year column
screen$year <- as.numeric(format(screen$date, format = "%Y"))
# Load flu data
flu <- read.csv("/media/joebrew/JB/fdoh/private/ben/dat.csv")
# join by id
library(plyr)
x <- join(x = screen,
y = flu,
type = "left",
match = "first",
by = c("personID", "year"))
# clean up
library(dplyr)
x <- join(x = screen,
library(plyr)
library(plyr)
install.packages("plyr")
# Load obesity data
load("/media/joebrew/JB/fdoh/private/ben/screen.RData")
rm(lms, lms1, lms2,
screen07, screen08, screen09,
screen10, screen11, screen12,
screen13, i, delFun)
# Get id
screen$personID <- screen$PersonID
# Remove prior to 2011
screen$date <- as.Date(screen$Health_Screening_Date, format = "%Y-%m-%d")
screen <- screen[which(screen$date >= "2011-08-01"),]
# Remove spring screenings
hist(as.numeric(format(screen$date, format = "%j")))
screen <- screen[which(as.numeric(format(screen$date, format = "%j")) > 200),]
# Add year column
screen$year <- as.numeric(format(screen$date, format = "%Y"))
# Load flu data
flu <- read.csv("/media/joebrew/JB/fdoh/private/ben/dat.csv")
# join by id
library(plyr)
x <- join(x = screen,
y = flu,
type = "left",
match = "first",
by = c("personID", "year"))
# clean up
library(dplyr)
names(x)
head(x)
y <- x %>%
select(personID)
y <- x %>%
select(year)
y <- x[,c("year", "School_Name", "Grade", "Race", "Gender",
"Age_Years", "Age_Months", "Growth_Height", "Growth_Weight", "Lunch_Status",
"bmi", "Z", "cat", "catbi", "cf", "lunchbi", "lunch", "racebi", "race", "teacher")]
y <- x[,c("year", "School_Name", "Grade", "Race", "Gender",
"Age_Years", "Age_Months", "Growth_Height", "Growth_Weight", "Lunch_Status",
"bmi", "Z", "cat", "catbi", "cf", "lunchbi", "lunch", "racebi",
"race", "teacher", "intern")]
nrow(y[which(is.na(y$intern)),])
y <- y[which(!is.na(y$intern)),]
head(y)
row.names(y)
row.names(y) <- NULL
head(y)
y$intern <- NULL
table(y$Race == y$race)
y$Race <- NULL
y$Lunch_Status <- NULL
table(y$Race == y$race)
head(y)
table(y$racebi)
getwd()
write.csv(y, "/media/joebrew/JB/fdoh/private/ben/health_data.csv")
library(rgdal)
install.packages("rgdal")
install.packages("rgdal")
# Load package
library(rgdal)
library(sp)
library(raster)
library(spatstat)
# Setwd
setwd("/home/joebrew/Documents/uf/phc6194/hw6")
# Read in objects and transform to same projection system
# Elevation (raster)
elevation <- readGDAL("elevation1.tif") # read in
relevation <- raster(elevation) # rasterlayer version
#ielevation <- as.im(elevation) #image version
# Hospitals (spatial dataframe)
hospitals <- readOGR(".", "Hospital")
hospitals <- spTransform(hospitals,
CRS(proj4string(elevation)))
# Land use (raster)
land_use <- readGDAL("Land_use.tif")
land_use <- spTransform(land_use,
CRS(proj4string(elevation)))
rland_use <- raster(land_use) # raster version
boundary <- readOGR(".", "Alachua_Boundary")
boundary <- spTransform(boundary,
CRS(proj4string(elevation)))
plot(boundary)
x <- sample(seq(min(coordinates(elevation)[,1]),
max(coordinates(elevation)[,1]),
length = 100000),
100000)
y <- sample(seq(min(coordinates(elevation)[,2]),
max(coordinates(elevation)[,2]),
length = 100000),
100000)
posibs <- data.frame(cbind(x,y))
coordinates(posibs) <- ~x+y
posibs_land_use <- extract(rland_use, coordinates(posibs))
posibs_elevation <- extract(relevation, coordinates(posibs))
posibs_land_use <- extract(rland_use, coordinates(posibs))
extract(rland_use, coordinates(posibs))
rland_use
z <- extract(rland_use, coordinates(posibs))
z <- extract(land_use, coordinates(posibs))
z <- extract(rland_use, coordinates(posibs))
land_use <- readGDAL("Land_use.tif")
rland_use <- raster(land_use) # raster version
land_use <- spTransform(land_use,
CRS(proj4string(elevation)))
rland_use <- spTransform(rland_use,
CRS(proj4string(elevation)))
library(rgdal)
library(sp)
library(raster)
library(spatstat)
posibs_land_use <- extract(rland_use, coordinates(posibs))
# Now let's get the elevation for each of those points
posibs_elevation <- extract(relevation, coordinates(posibs))
# Put land_use and elevation together
posibs_data <- data.frame("land_use" = posibs_land_use,
"elevation" = posibs_elevation)
# Bind it all into a spatial dataframe
posibs <- SpatialPointsDataFrame(coords = coordinates(posibs),
data = posibs_data)
# Get right CRS / proj4string
proj4string(posibs)
proj4string(posibs) <- CRS(proj4string(elevation))
x <- over(posibs, polygons(boundary))
posibs <- posibs[which(!is.na(x)),]
# Plot posibs to confirm that it works well
plot(posibs, col = adjustcolor("black", alpha.f = 0.1))
posibs$xx <- ifelse(posibs$land_use >= 1 & posibs$land_use <= 10, "bad", "good")
posibs <- posibs[which(posibs$xx == "good"),]
# Let's plot to see what we're left with
plot(posibs)
posibs$land_use <- ifelse(posibs$land_use >= 1 & posibs$land_use <= 10, "bad", "good")
# Now, let's keep only those possible locations with good land use
posibs <- posibs[which(posibs$land_use == "good"),]
plot(posibs, col = adjustcolor("black", alpha.f = 0.1))
x <- gBuffer(posibs, width = 100)
library(rgeos)
install.packages("rgeos")
x <- gBuffer(posibs, width = 100)
library(rgeos)
x <- gBuffer(posibs, width = 100)
plot(x)
buffers <- gBuffer(posibs, width = 100)
summary(buffers)
extract(relevation, coordinates(buffers)[1])
extract(relevation, coordinates(buffers)[2])
extract(relevation, coordinates(buffers)[1:100])
extract(relevation, coordinates(buffers)[1:1000])
extract(elevation, coordinates(buffers)[1:1000])
extract(rland_use, coordinates(buffers)[1:1000])
extract(relevation, buffers[1:100,]
)
proj4string(buffers) <- CRS(proj4string(elevation))
extract(relevation, buffers[1:100,])
extract(relevation, coordinates(buffers))
extract(relevation, buffers)
head(buffers)
test <- buffers[1:100]
z <- extract(relevation, buffers)
