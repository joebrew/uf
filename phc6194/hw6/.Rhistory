load("/media/joebrew/JB/fdoh/private/ben/screen.RData")
rm(lms, lms1, lms2,
screen07, screen08, screen09,
screen10, screen11, screen12,
screen13, i, delFun)
load("/media/joebrew/JB/fdoh/private/ben/flu.RData")
head(dat)
head(screen)
screen$id <- screen$PersonID
head(screen)
str(screen$Health_Screening_Date)
screen$date <- as.Date(screen$Health_Screening_Date, format = "%Y-%m-%d")
hist(screen$date, breaks = 100)
screen <- screen[which(screen$date >= "2011-08-01"),]
hist(as.numeric(format(screen$date, format = "%j")))
screen <- screen[which(as.numeric(format(screen$date, format = "%j")) > 200),]
dat$year
screen$year <- as.numeric(format(screen$date, format = "%Y"))
table(screen$year)
table
table(screen$year)
x <- merge(x = screen,
y = dat,
all.x = TRUE,
all.y = FALSE,
by = c("id", "year"))
head(x)
load("/media/joebrew/JB/fdoh/private/ben/screen.RData")
rm(lms, lms1, lms2,
screen07, screen08, screen09,
screen10, screen11, screen12,
screen13, i, delFun)
# Get id
screen$id <- screen$PersonID
# Remove prior to 2011
screen$date <- as.Date(screen$Health_Screening_Date, format = "%Y-%m-%d")
screen <- screen[which(screen$date >= "2011-08-01"),]
# Remove spring screenings
hist(as.numeric(format(screen$date, format = "%j")))
screen <- screen[which(as.numeric(format(screen$date, format = "%j")) > 200),]
# Add year column
screen$year <- as.numeric(format(screen$date, format = "%Y"))
flu <- read.csv("/media/joebrew/JB/fdoh/private/ben/dat.csv")
head(flu)
head(screen)
x <- merge(x = screen,
y = dat,
all.x = TRUE,
all.y = FALSE,
by = c("personID", "year"))
x <- merge(x = screen,
y = flu,
all.x = TRUE,
all.y = FALSE,
by = c("personID", "year"))
dat$personID
flu$personID
screen$personID
screen$personID <- screen$PersonID
x <- merge(x = screen,
y = flu,
all.x = TRUE,
all.y = FALSE,
by = c("personID", "year"))
head(x)
library(plyr)
?join
x <- join(x = screen,
y = flu,
type = "left",
match = "first",
by = c("personID", "year"))
head(x)
table(is.na(x$dob))
library(dplyr)
install.packages("dplyr")
library(dplyr)
version()
Version()
session()
Session.info()
?session.info
install.packages("dplyr")
update.packages()
library(plyr)
library(dplyr)
install.packages("dplyr")
install.packages("randomForest")
install.packages(dplyr)
install.packages("dplyr")
library(devtools)
install_github("hadley/dplyr")
library(dplyr)
library(dplyr)
install.packages("dplyr")
# Load obesity data
load("/media/joebrew/JB/fdoh/private/ben/screen.RData")
rm(lms, lms1, lms2,
screen07, screen08, screen09,
screen10, screen11, screen12,
screen13, i, delFun)
# Get id
screen$personID <- screen$PersonID
# Remove prior to 2011
screen$date <- as.Date(screen$Health_Screening_Date, format = "%Y-%m-%d")
screen <- screen[which(screen$date >= "2011-08-01"),]
# Remove spring screenings
hist(as.numeric(format(screen$date, format = "%j")))
screen <- screen[which(as.numeric(format(screen$date, format = "%j")) > 200),]
# Add year column
screen$year <- as.numeric(format(screen$date, format = "%Y"))
# Load flu data
flu <- read.csv("/media/joebrew/JB/fdoh/private/ben/dat.csv")
# join by id
library(plyr)
x <- join(x = screen,
y = flu,
type = "left",
match = "first",
by = c("personID", "year"))
# clean up
library(dplyr)
x <- join(x = screen,
library(plyr)
library(plyr)
install.packages("plyr")
# Load obesity data
load("/media/joebrew/JB/fdoh/private/ben/screen.RData")
rm(lms, lms1, lms2,
screen07, screen08, screen09,
screen10, screen11, screen12,
screen13, i, delFun)
# Get id
screen$personID <- screen$PersonID
# Remove prior to 2011
screen$date <- as.Date(screen$Health_Screening_Date, format = "%Y-%m-%d")
screen <- screen[which(screen$date >= "2011-08-01"),]
# Remove spring screenings
hist(as.numeric(format(screen$date, format = "%j")))
screen <- screen[which(as.numeric(format(screen$date, format = "%j")) > 200),]
# Add year column
screen$year <- as.numeric(format(screen$date, format = "%Y"))
# Load flu data
flu <- read.csv("/media/joebrew/JB/fdoh/private/ben/dat.csv")
# join by id
library(plyr)
x <- join(x = screen,
y = flu,
type = "left",
match = "first",
by = c("personID", "year"))
# clean up
library(dplyr)
names(x)
head(x)
y <- x %>%
select(personID)
y <- x %>%
select(year)
y <- x[,c("year", "School_Name", "Grade", "Race", "Gender",
"Age_Years", "Age_Months", "Growth_Height", "Growth_Weight", "Lunch_Status",
"bmi", "Z", "cat", "catbi", "cf", "lunchbi", "lunch", "racebi", "race", "teacher")]
y <- x[,c("year", "School_Name", "Grade", "Race", "Gender",
"Age_Years", "Age_Months", "Growth_Height", "Growth_Weight", "Lunch_Status",
"bmi", "Z", "cat", "catbi", "cf", "lunchbi", "lunch", "racebi",
"race", "teacher", "intern")]
nrow(y[which(is.na(y$intern)),])
y <- y[which(!is.na(y$intern)),]
head(y)
row.names(y)
row.names(y) <- NULL
head(y)
y$intern <- NULL
table(y$Race == y$race)
y$Race <- NULL
y$Lunch_Status <- NULL
table(y$Race == y$race)
head(y)
table(y$racebi)
getwd()
write.csv(y, "/media/joebrew/JB/fdoh/private/ben/health_data.csv")
library(rgdal)
install.packages("rgdal")
install.packages("rgdal")
library(rgdal)
library(sp)
library(raster)
library(spatstat)
beginner
setwd("/home/joebrew/Documents/uf/phc6194/hw6")
# Elevation (raster)
elevation <- readGDAL("elevation1.tif") # read in
relevation <- raster(elevation) # rasterlayer version
#ielevation <- as.im(elevation) #image version
# Hospitals (spatial dataframe)
hospitals <- readOGR(".", "Hospital")
hospitals <- spTransform(hospitals,
CRS(proj4string(elevation)))
land_use <- readGDAL("Land_use.tif")
rland_use <- raster(land_use) # raster version
land_use <- spTransform(land_use,
CRS(proj4string(elevation)))
rland_use <- spTransform(rland_use,
CRS(proj4string(elevation)))
# Alachua boundary
boundary <- readOGR(".", "Alachua_Boundary")
boundary <- spTransform(boundary,
CRS(proj4string(elevation)))
#####
# Quick plot of elevation and hospitals to confirm that coordinate
# transformation worked
#####
#image(elevation, col= grey(1:99/100), axes=TRUE)
#plot(hospitals, col = "red", add = TRUE)
#image(land_use, col= adjustcolor(grey(1:99/100), alpha.f=0.2), axes=TRUE)
# Pick best place for new hospital.
# It should be far from other hospitals and should be on appropriate land / slope
# First, let's generate a random set of possible points
x <- sample(seq(min(coordinates(elevation)[,1]),
max(coordinates(elevation)[,1]),
length = 10000),
10000)
y <- sample(seq(min(coordinates(elevation)[,2]),
max(coordinates(elevation)[,2]),
length = 10000),
10000)
posibs <- data.frame(cbind(x,y))
coordinates(posibs) <- ~x+y
# Now, let's get the land use for each of those points
posibs_land_use <- extract(rland_use, coordinates(posibs))
# Now let's get the elevation for each of those points
posibs_elevation <- extract(relevation, coordinates(posibs))
# Put land_use and elevation together
posibs_data <- data.frame("land_use" = posibs_land_use,
"elevation" = posibs_elevation)
# Bind it all into a spatial dataframe
posibs <- SpatialPointsDataFrame(coords = coordinates(posibs),
data = posibs_data)
# Get right CRS / proj4string
proj4string(posibs) <- CRS(proj4string(elevation))
# So, now we have all these random points with their associated
# land_use and elevation
# This is called posibs, and it's a SpatialPointsDataFrame
# Now, let's keep only those points which are in Alachua County
x <- over(posibs, polygons(boundary))
posibs <- posibs[which(!is.na(x)),]
# Plot posibs to confirm that it works well
plot(posibs, col = adjustcolor("black", alpha.f = 0.1))
# Land use is a numeric coded object - and we have not been given instructions
# As far as how to code it!
# Base on the (somewhat confusing) email, I'm assuming that 1-10 is good land
# for hospitals and all others are bad?
# I'll recode accordingly
posibs$land_use <- ifelse(posibs$land_use >= 1 & posibs$land_use <= 10, "bad", "good")
# Now, let's keep only those possible locations with good land use
posibs <- posibs[which(posibs$land_use == "good"),]
# Let's plot to see what we're left with
plot(posibs, col = adjustcolor("black", alpha.f = 0.1))
# So, now we're left with about 50,000+ possible locations
# Let's get rid of those with bad slopes
# To get elevation change at each point, we'll
# need to make assumptions.  I'm assuming that the hospital
# will be 100 meters in all directions from a central point
library(rgeos)
buffers <- gBuffer(posibs, width = 100)
proj4string(buffers) <- CRS(proj4string(elevation))
# Get elevation differential for each area in buffers
z <- extract(relevation, buffers)
z
plot(posibs, col = adjustcolor("black", alpha.f = 0.1))
plot(buffers)
y <- vector(length = nrow(posibs), mode = "numeric")
length(z)
nrow(z)
summary(z)
length(z)
nrow(posibs)
z[1]
z[[1]]
z[[2]]
z
z[2]
z[3]
z[l3]
str(z)
z <- extract(relevation, polygons(buffers))
z
z <- extract(relevation, buffers, fun = range)
z
zmax <- extract(relevation, buffers, fun = max) #max
zmax
zmax <- extract(relevation, points(posibs), na.rm = TRUE) #max
zmax <- extract(relevation, coordinates(posibs), na.rm = TRUE) #max
zmax
nrow(posibs)
zmax <- extract(relevation,
coordinates(posibs),
buffer = 100,
fun = max,
na.rm = TRUE) #max
zmax
zmin <- extract(relevation,
coordinates(posibs),
buffer = 100,
fun = min,
na.rm = TRUE) #max
zmax - zmin
head(posibs)
posibs$slope <- zmax - zmin
scale(posibs$slope)
hist(scale(posibs$slope))
?spDists
coordinates(hospitals)[1]
coordinates(hospitals)[1,]
spDists(coordinates(posibs), pt = coordinates(hospitals)[1,])
spDistsN1(coordinates(posibs), pt = coordinates(hospitals)[1,])
nrow(hospitals)
nrow(posibs)
posibs$distance_from_nearest_hosp <- NA
hosp <- spDistsN1(coordinates(posibs)[1,], pt = coordinates(hospitals))
hosp <- spDistsN1(coordinates(hospitals), pt = coordinates(posibs)[1,],)
hospo
hosp
posibs$distance_from_nearest_hosp <- NA
for (i in 1:nrow(posibs)){
hosp <- spDistsN1(coordinates(hospitals), pt = coordinates(posibs)[i,])
posibs$distance_from_nearest_hosp[i] <-  min(hosp, na.rm = TRUE)
}
posibs$distance_from_nearest_hosp
pobis$slope_rec <- scale(posibs$slope)
posibs$slope_rec <- scale(posibs$slope)
posibs$distance_rec <- scale(posibs$distance_from_nearest_hosp)
posibs$slope_rec
hist(posibs$slope_rec)
posibs$slope_rec <- posibs$slope_rec * -1
posibs$distance_rec <- posibs$distance_rec *3
posibs$score <- posibs$distance_rec + posibs$slope_rec
hist(posibs$score)
min(posibs$score)
plot(posibs)
plot(posibs,
pch = 16)
plot(posibs,
pch = 16,
cex = 0.2)
plot(posibs,
pch = 16,
cex = 0.4)
library(RColorBrewer)
install.packages("RColorBrewer")
mycols <- colorRampPalette(c("blue", "darkgreen", "grey", "white"))(60)
range(posibs$score)
myrange <- ceiling(max(posibs$score)) - ceiling(min(posibs$score))
myrange
mycols <- colorRampPalette(c("darkred", "darkorange", "yellow", "green", "darkgreen"))(myrange + 1)
ceiling(min(posibs$score))
plot(posibs,
pch = 16,
cex = 0.4,
col = mycols[ceiling(min(posibs$score)) + ceiling(posibs$score) + 1] )
mycols <- colorRampPalette(c("darkred",  "green", "darkgreen"))(myrange + 1)
plot(posibs,
pch = 16,
cex = 0.4,
col = mycols[ceiling(min(posibs$score)) + ceiling(posibs$score) + 1] )
mycols <- colorRampPalette(c("darkred",  "darkgreen"))(myrange + 1)
mycols <- adjustcolor(mycols, alpha.f = 0.4)
plot(posibs,
pch = 16,
cex = 0.4,
col = mycols[ceiling(min(posibs$score)) + ceiling(posibs$score) + 1] )
plot(posibs,
pch = 16,
cex = 0.6,
col = mycols[ceiling(min(posibs$score)) + ceiling(posibs$score) + 1] )
posibs[which(posibs$score == max(posibs$score)),]
points(posibs[which(posibs$score == max(posibs$score)),],
col = "darkblue", pch = 16)
points(posibs[which(posibs$score == max(posibs$score)),],
col = "darkblue", pch = 16,
cex = 3)
# Let's scale both slope and distance from nearest hospital
posibs$slope_rec <- scale(posibs$slope)
posibs$distance_rec <- scale(posibs$distance_from_nearest_hosp)
# We wan't LOW slope but HIGH distance, so let's invert slope
# so that both variables we want high
posibs$slope_rec <- posibs$slope_rec * -1
# I'm going to weight distance 3 times as much as slope,
# since slope can be fixed through modern engineering
posibs$distance_rec <- posibs$distance_rec *2
# Assign a score (at this point, it's just a combo of slope_rec and distance_rec,
# since I've already weighted)
posibs$score <- posibs$distance_rec + posibs$slope_rec
# Look at that score
hist(posibs$score)
# Make a color vector and plot
library(RColorBrewer)
myrange <- ceiling(max(posibs$score)) - ceiling(min(posibs$score))
mycols <- colorRampPalette(c("darkred",  "darkgreen"))(myrange + 1)
mycols <- adjustcolor(mycols, alpha.f = 0.4)
plot(posibs,
pch = 16,
cex = 0.6,
col = mycols[ceiling(min(posibs$score)) + ceiling(posibs$score) + 1] )
# Best place to build new hospital
points(posibs[which(posibs$score == max(posibs$score)),],
col = "darkblue", pch = 16,
cex = 3)
library(rgdal)
plot(posibs, col = adjustcolor("black", alpha.f = 0.1))
hist(posibs$score)
plot(posibs,
pch = 16,
cex = 0.6,
col = mycols[ceiling(min(posibs$score)) + ceiling(posibs$score) + 1] )
# Best place to build new hospital
points(posibs[which(posibs$score == max(posibs$score)),],
col = "darkblue", pch = 16,
cex = 3)
posibs[which(posibs$score == max(posibs$score)),]
